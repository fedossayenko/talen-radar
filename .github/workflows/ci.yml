name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Cache Prisma Client
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.prisma
            apps/api/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Setup test database directory
        run: mkdir -p apps/api/test/tmp

      - name: Generate Prisma Client
        run: bun run db:generate
        env:
          DATABASE_URL: file:./test/tmp/ci-test.db

      - name: Run database migrations
        run: bun run db:migrate
        env:
          DATABASE_URL: file:./test/tmp/ci-test.db

      - name: Lint code
        id: lint
        continue-on-error: true
        run: bun run lint

      - name: Auto-fix Lint Errors with AI
        if: failure() && steps.lint.outcome == 'failure'
        id: ai_lint_fix
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          LINT_ERRORS="${{ steps.lint.outputs.stdout }}${{ steps.lint.outputs.stderr }}"
          PROMPT="You are an expert programmer tasked with fixing linting errors. Based on the following errors, provide a series of shell commands, primarily using 'sed', to fix the files directly. Output ONLY the shell commands. If you cannot find a fix, output 'No fix found'.\n\nErrors:\n$LINT_ERRORS"
          
          API_URL="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-latest:generateContent?key=$GEMINI_API_KEY"
          JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{ "contents": [ { "parts": [ { "text": $prompt } ] } ] }')
          FIX_COMMANDS=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" "$API_URL" | jq -r '.candidates[0].content.parts[0].text')

          if [[ "$FIX_COMMANDS" == "No fix found" ]]; then
            echo "AI could not determine a fix."
            exit 1
          fi

          echo "Applying AI-generated fixes..."
          eval "$FIX_COMMANDS"
          echo "applied_fix=true" >> $GITHUB_OUTPUT

      - name: Verify and Commit Lint Fix
        if: steps.ai_lint_fix.outputs.applied_fix == 'true'
        run: |
          echo "Verifying AI fix by re-running the linter..."
          if ! bun run lint; then
            echo "AI fix did not resolve linting errors. Failing workflow."
            exit 1
          fi
          
          echo "Linting errors fixed successfully. Committing changes..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore(ci): apply automatic linting fixes"
          git push

      - name: Type check
        run: bun run type-check

      - name: Run unit tests
        run: bun run test
        env:
          DATABASE_URL: file:./test/tmp/ci-test.db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Run E2E tests
        run: bun run test:e2e
        env:
          DATABASE_URL: file:./test/tmp/ci-test.db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Build applications
        run: bun run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./apps/api/coverage/lcov.info
          flags: backend
          name: backend-coverage

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        id: bun_audit
        continue-on-error: true
        run: bun audit

      - name: Run dependency review
        id: dep_review
        continue-on-error: true
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: Auto-fix Security Issues with AI
        if: steps.bun_audit.outcome == 'failure' || steps.dep_review.outcome == 'failure'
        id: ai_security_fix
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          BUN_AUDIT_ERRORS: ${{ steps.bun_audit.outputs.stdout }}${{ steps.bun_audit.outputs.stderr }}
          DEP_REVIEW_ERRORS: ${{ steps.dep_review.outputs.stdout }}${{ steps.dep_review.outputs.stderr }}
        run: |
          PROMPT="You are a cybersecurity expert. The following security checks failed. Analyze all reports and provide a consolidated series of 'bun update <package>' commands to fix all vulnerabilities. Only output the shell commands. If no fix is possible, output 'No fix found'.\n\nBUN AUDIT REPORT:\n$BUN_AUDIT_ERRORS\n\nDEPENDENCY REVIEW REPORT:\n$DEP_REVIEW_ERRORS"
          
          API_URL="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-latest:generateContent?key=$GEMINI_API_KEY"
          JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{ "contents": [ { "parts": [ { "text": $prompt } ] } ] }')
          FIX_COMMANDS=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" "$API_URL" | jq -r '.candidates[0].content.parts[0].text')

          if [[ "$FIX_COMMANDS" == "No fix found" ]]; then
            echo "AI could not determine a fix for security issues."
            exit 1
          fi

          echo "Applying AI-generated security fixes..."
          eval "$FIX_COMMANDS"
          echo "applied_fix=true" >> $GITHUB_OUTPUT

      - name: Verify and Commit Security Fix
        if: steps.ai_security_fix.outputs.applied_fix == 'true'
        run: |
          echo "Verifying AI fix by re-running security checks..."
          # Re-run bun audit
          if ! bun audit; then
            echo "AI fix did not resolve bun audit issues. Failing workflow."
            exit 1
          fi
          # Re-run dependency review if it was the one that failed
          if [[ "${{ steps.dep_review.outcome }}" == "failure" ]]; then
            if ! actions/dependency-review-action@v4; then
              echo "AI fix did not resolve dependency review issues. Failing workflow."
              exit 1
            fi
          fi
          
          echo "Security issues fixed successfully. Committing changes..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add bun.lockb
          git commit -m "chore(ci): apply automatic security audit fixes"
          git push

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t talent-radar-api:test -f apps/api/Dockerfile .