name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Cache Prisma Client
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.prisma
            apps/api/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Setup test database directory
        run: mkdir -p apps/api/test/tmp

      - name: Generate Prisma Client
        run: bun run db:generate
        env:
          DATABASE_URL: file:./test/tmp/ci-test.db

      - name: Run database migrations
        run: bun run db:migrate
        env:
          DATABASE_URL: file:./test/tmp/ci-test.db

      - name: Lint code
        run: bun run lint

      - name: Type check
        run: bun run type-check

      - name: Run unit tests
        run: bun run test
        env:
          DATABASE_URL: file:./test/tmp/ci-test.db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Run E2E tests
        run: bun run test:e2e
        env:
          DATABASE_URL: file:./test/tmp/ci-test.db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Build applications
        run: bun run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./apps/api/coverage/lcov.info
          flags: backend
          name: backend-coverage

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit

      - name: Run dependency review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t talent-radar-api:test -f apps/api/Dockerfile .

#      - name: Test Docker image
#        run: |
#          docker run --rm -d --name test-api -p 3001:3000 \
#            --network host \
#            -e DATABASE_URL="file:./test.db" \
#            -e PORT=3000 \
#            -e NODE_ENV=test \
#            -e REDIS_URL="redis://localhost:6379" \
#            talent-radar-api:test
#          sleep 20
#          curl -f http://localhost:3001/api/v1/health || exit 1
#          docker stop test-api
