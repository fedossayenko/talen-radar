name: Scheduled Maintenance

permissions:
  contents: read
  security-events: write
  issues: write

on:
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'
    # Weekly dependency update check on Sundays at 4 AM UTC
    - cron: '0 4 * * 0'
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run'
        required: true
        default: 'security-scan'
        type: choice
        options:
          - security-scan
          - dependency-update
          - performance-benchmark

jobs:
  security-scan:
    name: Daily Security Scan
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'security-scan')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Create security report issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security vulnerabilities detected',
              body: 'Automated security scan detected vulnerabilities. Please review the security tab.',
              labels: ['security', 'automated']
            })

  dependency-update:
    name: Weekly Dependency Check
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 4 * * 0' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'dependency-update')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          npm outdated > outdated.txt || true
          if [ -s outdated.txt ]; then
            echo "OUTDATED_DEPS=true" >> $GITHUB_ENV
          else
            echo "OUTDATED_DEPS=false" >> $GITHUB_ENV
          fi

      - name: Create dependency update issue
        if: env.OUTDATED_DEPS == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = fs.readFileSync('outdated.txt', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Weekly dependency update check',
              body: `## Outdated Dependencies\n\n\`\`\`\n${outdated}\n\`\`\`\n\nPlease review and update these dependencies.`,
              labels: ['dependencies', 'maintenance', 'automated']
            })

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'performance-benchmark'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: talent_radar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run db:generate
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/talent_radar_test

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/talent_radar_test

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: |
          echo "ðŸš€ Starting performance benchmark..."
          # This will be implemented when we have actual endpoints to test
          echo "ðŸ“Š Performance benchmark completed"

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: benchmark-results.json
          retention-days: 30