name: UI Tests

permissions:
  contents: read
  pull-requests: write
  issues: write

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'package.json'
      - '.github/workflows/ui-tests.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Unit Tests & Code Quality
  unit-tests:
    name: Unit Tests & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/web/node_modules
          key: ${{ runner.os }}-ui-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-ui-deps-

      - name: Lint web app
        run: npm run lint:web

      - name: Type check web app
        run: npm run type-check:web

      - name: Run unit tests
        run: npm run test:web
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: cd apps/web && npx playwright install --with-deps ${{ matrix.browser }}

      - name: Cache Prisma Client
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.prisma
            apps/api/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Setup test database directory
        run: mkdir -p apps/api/test/tmp

      - name: Generate Prisma Client
        run: npm run db:generate
        env:
          DATABASE_URL: file:./test/tmp/e2e-test.db

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: file:./test/tmp/e2e-test.db

      - name: Seed test database
        run: npm run db:seed
        env:
          DATABASE_URL: file:./test/tmp/e2e-test.db
          NODE_ENV: test

      - name: Build web app
        run: npm run build:web

      - name: Run E2E tests
        run: npm run test:e2e:web --project=${{ matrix.browser }}
        env:
          DATABASE_URL: file:./test/tmp/e2e-test.db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          VITE_API_URL: http://localhost:3000/api/v1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: apps/web/playwright-report/
          retention-days: 7

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-videos-${{ matrix.browser }}
          path: apps/web/test-results/
          retention-days: 7

  # Build Test
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build:web

      - name: Check bundle size
        run: |
          echo "Bundle size analysis:"
          cd apps/web/dist
          du -sh *
          find . -name "*.js" -exec ls -lh {} + | sort -k5 -h

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: apps/web/dist/
          retention-days: 7

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, build-test]
    if: always()
    steps:
      - name: Create test summary
        uses: actions/github-script@v7
        with:
          script: |
            const unitTestsResult = '${{ needs.unit-tests.result }}';
            const e2eTestsResult = '${{ needs.e2e-tests.result }}';
            const buildTestResult = '${{ needs.build-test.result }}';
            
            const getStatusEmoji = (status) => {
              switch (status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            const summary = `
            ## 🧪 UI Test Results Summary
            
            | Test Suite | Status |
            |------------|--------|
            | Unit Tests & Code Quality | ${getStatusEmoji(unitTestsResult)} ${unitTestsResult} |
            | E2E Tests | ${getStatusEmoji(e2eTestsResult)} ${e2eTestsResult} |
            | Build Test | ${getStatusEmoji(buildTestResult)} ${buildTestResult} |
            
            ### Test Details
            - **Unit Tests**: TypeScript checks, ESLint, Vitest unit tests
            - **E2E Tests**: Cross-browser testing with Playwright (Chromium, Firefox, WebKit)
            - **Build Test**: Production build verification and bundle analysis
            
            ${(unitTestsResult === 'success' && e2eTestsResult === 'success' && buildTestResult === 'success') 
              ? '🎉 All tests passed! Ready to merge.' 
              : '⚠️ Some tests failed. Please check the details above.'}
            `;
            
            core.summary.addRaw(summary);
            await core.summary.write();
