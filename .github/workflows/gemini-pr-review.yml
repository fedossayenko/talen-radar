name: AI PR Reviewer

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to fetch history for git diff

      - name: Get PR Diff
        id: get_diff
        run: |
          DIFF=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Call Gemini API for Review
        id: gemini_review
        run: |
          # Write prompt to a temporary file to handle complex content
          cat > prompt.txt << 'EOF'
          You are an AI code reviewer. Your task is to analyze the provided git diff and identify only the most severe issues.

          **Instructions:**
          1.  **Focus only on `critical` and `high` severity suggestions.** Do not report medium or low-severity issues like style conventions or minor nitpicks.
          2.  **You MUST use one of the following severity levels for your findings:**
              *   `critical`: A potential bug, security vulnerability, or major performance issue.
              *   `high`: A major design or architectural issue.
          3.  **Provide context.** For each suggestion, specify the file and line number if possible.
          4.  **Be concise.** Keep your suggestions and reasoning brief and to the point.
          5.  **If you find no critical or high issues, you MUST respond with the single phrase `No critical or high severity issues found.`**

          ${{ steps.get_diff.outputs.diff }}
          EOF
          
          # Use Google's generative AI CLI tool
          echo "üöÄ Installing Google AI CLI..."
          npm install -g @google-ai/generativelanguage@latest
          
          # Alternative: Use curl to call Gemini API directly
          echo "üîç Running Gemini analysis via API..."
          
          # Set API key as environment variable
          export GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
          
          # Properly escape content for JSON using jq or python
          if command -v jq >/dev/null 2>&1; then
            # Use jq to properly escape JSON
            PROMPT_CONTENT=$(cat prompt.txt)
            echo '{"contents":[{"parts":[{"text":""}]}]}' | jq --arg text "$PROMPT_CONTENT" '.contents[0].parts[0].text = $text' > request.json
          else
            # Fallback: Use python for proper JSON escaping
            python3 -c "
import json
import sys
with open('prompt.txt', 'r') as f:
    content = f.read()
payload = {
    'contents': [{
        'parts': [{
            'text': content
        }]
    }]
}
with open('request.json', 'w') as f:
    json.dump(payload, f)
"
          fi
          
          # Call Gemini API directly using curl
          if curl -s -H "Content-Type: application/json" \
               -H "x-goog-api-key: ${GEMINI_API_KEY}" \
               -d @request.json \
               "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent" \
               > api_response.json 2>&1; then
            
            # Extract text from API response
            if command -v jq >/dev/null 2>&1; then
              jq -r '.candidates[0].content.parts[0].text // "No response content"' api_response.json > gemini_response.txt
            else
              # Fallback without jq - basic text extraction
              grep -o '"text"[^}]*' api_response.json | sed 's/"text"[[:space:]]*:[[:space:]]*"//' | sed 's/"[[:space:]]*$//' > gemini_response.txt || echo "Failed to parse response" > gemini_response.txt
            fi
            echo "‚úÖ Gemini CLI completed successfully"
          else
            echo "‚ùå Gemini CLI failed with exit code $?"
            echo "Error output:"
            cat gemini_response.txt
          fi
          
          # Debug: Show raw response file content
          echo "üìÑ Raw response file size: $(wc -c < gemini_response.txt) bytes"
          echo "üìÑ Raw response content:"
          cat gemini_response.txt
          echo "üìÑ End of raw response"
          
          # Read the response and set output
          GEMINI_RESPONSE=$(cat gemini_response.txt)
          echo "üìù Setting output variable with ${#GEMINI_RESPONSE} characters"
          
          echo "gemini-response<<EOF" >> $GITHUB_OUTPUT
          echo "$GEMINI_RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Clean up
          rm -f prompt.txt gemini_response.txt

      - name: Debug Gemini Response
        id: debug_response
        env:
          RESPONSE: ${{ steps.gemini_review.outputs.gemini-response }}
        run: |
          echo "üîç Debugging Gemini Response Output"
          echo "=================================="
          echo "Response length: ${#RESPONSE} characters"
          echo "Response preview (first 200 chars):"
          echo "${RESPONSE:0:200}"
          if [[ ${#RESPONSE} -gt 200 ]]; then
            echo "... (truncated, total ${#RESPONSE} characters)"
          fi
          echo "=================================="
          
          # Check if response is empty or contains only whitespace
          if [[ -z "${RESPONSE// }" ]]; then
            echo "‚ö†Ô∏è  WARNING: Gemini response is empty!"
            echo "response_status=empty" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Gemini response contains content (${#RESPONSE} characters)"
            echo "response_status=valid" >> $GITHUB_OUTPUT
          fi

      - name: Post Review Comment
        if: steps.gemini_review.outputs.gemini-response != 'No critical or high severity issues found.' && steps.debug_response.outputs.response_status == 'valid'
        uses: marocchino/sticky-pull-request-comment@v2
        env:
          GEMINI_RESPONSE: ${{ steps.gemini_review.outputs.gemini-response }}
        with:
          header: gemini-review
          message: |
            ### ‚ú® AI Review ‚ú®
            
            ${{ env.GEMINI_RESPONSE }}

      - name: Post Fallback Comment
        if: steps.gemini_review.outputs.gemini-response != 'No critical or high severity issues found.' && steps.debug_response.outputs.response_status == 'empty'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: gemini-review
          message: |
            ### ‚ö†Ô∏è AI Review - Response Issue ‚ö†Ô∏è
            
            The AI reviewer attempted to analyze this PR but the response was empty or malformed. 
            
            Please check the workflow logs for details. This may indicate:
            - Complex markdown content causing YAML parsing issues
            - API response timeout or formatting problems
            - Output variable scoping issues
            
            **Action Required**: Manual code review recommended for this PR.
