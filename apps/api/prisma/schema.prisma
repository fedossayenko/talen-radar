// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Company model
model Company {
  id          String   @id @default(cuid())
  name        String
  website     String?
  description String?
  industry    String?
  size        String? // 1-10, 11-50, 51-200, 201-500, 501-1000, 1000+
  location    String?
  logo        String?
  founded     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  analyses  CompanyAnalysis[]
  vacancies Vacancy[]

  @@map("companies")
}

// Company Analysis model
model CompanyAnalysis {
  id                     String   @id @default(cuid())
  companyId              String
  cultureScore           Float?
  retentionRate          Float?
  hiringProcess          String?  // JSON string of process steps
  techStack              String?  // JSON string of technologies
  workLifeBalance        Float?
  careerGrowth           Float?
  salaryCompetitiveness  Float?
  benefitsScore          Float?
  analysisSource         String   @default("ai_generated")
  confidenceScore        Float?
  rawData                String?  // JSON string of raw analysis data
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_analyses")
}

// Vacancy model
model Vacancy {
  id              String   @id @default(cuid())
  title           String
  description     String?
  requirements    String?  // JSON string of requirements array
  location        String?
  salaryMin       Int?     // Use Int for currency (in cents)
  salaryMax       Int?
  currency        String?  // Currency code (USD, EUR, BGN, etc.)
  experienceLevel String?  // junior, mid, senior, lead, principal, entry, not_specified
  employmentType  String?  // full-time, part-time, contract, internship, freelance
  workModel       String?  // remote, hybrid, office, not_specified
  companyId       String
  sourceUrl       String?
  sourceSite      String?
  status          String   @default("active") // active, inactive, filled, draft
  postedAt        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // AI-specific fields
  contentHash            String?  // SHA-256 hash for caching extracted content
  extractionConfidence   Float?   // AI confidence score (0-100)
  extractionMetadata     String?  // JSON metadata: source, model used, processing time, etc.
  qualityScore          Float?   // Overall quality assessment (0-100)
  rawContent            String?  // Original scraped content for reprocessing
  aiExtractedData       String?  // JSON of all AI-extracted structured data
  
  // Enhanced structured fields from AI extraction
  responsibilities      String?  // JSON array of job responsibilities
  technologies         String?  // JSON array of technologies and tools
  benefits             String?  // JSON array of benefits and perks
  educationLevel       String?  // high_school, bachelor, master, phd, not_specified
  industry             String?  // Industry/sector
  teamSize             String?  // Team size if mentioned
  companySize          String?  // startup, small, medium, large, enterprise, not_specified
  applicationDeadline  DateTime? // Application deadline if specified

  // Relations
  company      Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  scores       VacancyScore[]
  applications Application[]

  @@map("vacancies")
  @@index([contentHash])
  @@index([extractionConfidence])
  @@index([qualityScore])
  @@index([sourceSite])
}

// Vacancy Score model
model VacancyScore {
  id                    String   @id @default(cuid())
  vacancyId             String
  overallScore          Float?
  salaryScore           Float?
  locationScore         Float?
  companyScore          Float?
  roleScore             Float?
  techStackScore        Float?
  workLifeBalanceScore  Float?
  careerGrowthScore     Float?
  scoringCriteria       String?  // JSON string of criteria and weights
  scoredAt              DateTime @default(now())

  // Relations
  vacancy Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)

  @@map("vacancy_scores")
}

// CV model
model CV {
  id            String   @id @default(cuid())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  path          String
  extractedText String?
  skills        String?  // JSON string of skills array
  experience    Int?     // Years of experience
  education     String?  // JSON string of education array
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  applications Application[]

  @@map("cvs")
}

// Application model
model Application {
  id          String   @id @default(cuid())
  vacancyId   String
  cvId        String?
  status      String   @default("draft") // draft, applied, interview, rejected, offered, accepted, withdrawn
  appliedAt   DateTime?
  coverLetter String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vacancy Vacancy @relation(fields: [vacancyId], references: [id])
  cv      CV?     @relation(fields: [cvId], references: [id])

  @@map("applications")
}