version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: talent-radar-postgres
    environment:
      POSTGRES_DB: talent_radar
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - talent-radar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: talent-radar-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - talent-radar-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile
      target: development
    container_name: talent-radar-api
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:password@postgres:5432/talent_radar
      REDIS_URL: redis://redis:6379
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      LOG_LEVEL: debug
    ports:
      - "3001:3001"
    volumes:
      - ./apps/api/src:/app/apps/api/src:ro
      - ./packages:/app/packages:ro
      - ./node_modules:/app/node_modules:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - talent-radar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["npm", "run", "dev:api"]

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: talent-radar-web
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3001
      VITE_APP_NAME: TalentRadar
      VITE_APP_VERSION: 0.1.0
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web/src:/app/src:ro
      - ./apps/web/public:/app/public:ro
      - ./apps/web/index.html:/app/index.html:ro
      - ./apps/web/vite.config.ts:/app/vite.config.ts:ro
      - ./apps/web/tsconfig.json:/app/tsconfig.json:ro
      - ./apps/web/tailwind.config.js:/app/tailwind.config.js:ro
      - ./apps/web/postcss.config.js:/app/postcss.config.js:ro
    depends_on:
      - api
    networks:
      - talent-radar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  scraper:
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile
      target: development
    container_name: talent-radar-scraper
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/talent_radar
      REDIS_URL: redis://redis:6379
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      SCRAPER_MODE: true
      PLAYWRIGHT_HEADLESS: true
      SCRAPER_CONCURRENCY: 3
      LOG_LEVEL: debug
    volumes:
      - ./apps/api/src:/app/apps/api/src:ro
      - ./packages:/app/packages:ro
      - ./node_modules:/app/node_modules:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - talent-radar-network
    restart: unless-stopped
    command: ["npm", "run", "dev:scraper"]

  adminer:
    image: adminer:4.8.1
    container_name: talent-radar-adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - talent-radar-network
    profiles:
      - tools

  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: talent-radar-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - talent-radar-network
    profiles:
      - tools

volumes:
  postgres_data:
    name: talent-radar-postgres-data
  redis_data:
    name: talent-radar-redis-data

networks:
  talent-radar-network:
    name: talent-radar-network
    driver: bridge