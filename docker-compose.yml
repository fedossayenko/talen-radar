services:
  postgres:
    image: postgres:16-alpine
    container_name: talent-radar-postgres
    environment:
      POSTGRES_DB: talent_radar
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_postgres_password_change_in_production}
    # Expose port for e2e tests (comment out for production)
    ports:
      - "5432:5432"
    volumes:
      - ./local-data/postgres:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - talent-radar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d talent_radar"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: talent-radar-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password_change_in_production}
    # Remove port exposure - only accessible within Docker network
    # ports:
    #   - "6379:6379"
    volumes:
      - ./local-data/redis:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--requirepass", "${REDIS_PASSWORD:-dev_redis_password_change_in_production}"]
    networks:
      - talent-radar-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-dev_redis_password_change_in_production}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile
      target: development
    container_name: talent-radar-api
    environment:
      NODE_ENV: development
      PORT: 3001
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_postgres_password_change_in_production}
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-dev_postgres_password_change_in_production}@postgres:5432/talent_radar
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_password_change_in_production}@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      LOG_LEVEL: debug
      PLAYWRIGHT_HEADLESS: true
      SCRAPER_CONCURRENCY: 3
      # AI Configuration
      AI_SERVICE_ENABLED: "true"
      AI_MODEL_DEFAULT: gpt-5-nano
      AI_TIMEOUT: 60000
      AI_MAX_RETRIES: 3
      AI_ENABLE_CACHING: "true"
      AI_CACHE_EXPIRY_HOURS: 24
      AI_MAX_CONTENT_LENGTH: 10000
      # AI Request Logging Configuration
      AI_REQUEST_LOGGING_ENABLED: "true"
      AI_LOG_DIRECTORY: "./logs/ai-requests"
      AI_LOG_RETENTION_DAYS: 30
      AI_LOG_INCLUDE_RESPONSES: "true"
      # Scraper Configuration
      SCRAPER_ENABLED: "true"
      DEVBG_BASE_URL: https://dev.bg
      DEVBG_API_URL: https://dev.bg/company/jobs/java/
      DEVBG_REQUEST_TIMEOUT: 30000
      DEVBG_REQUEST_DELAY: 2000
      DEVBG_MAX_PAGES: 10
      DEVBG_USER_AGENT: "TalentRadar/1.0 (Job Aggregator)"
      # Scraper Queue Settings
      SCRAPER_QUEUE_ATTEMPTS: 3
      SCRAPER_QUEUE_BACKOFF_DELAY: 5000
      SCRAPER_QUEUE_KEEP_COMPLETED: 100
      SCRAPER_QUEUE_KEEP_FAILED: 50
      # Scraper Filters
      SCRAPER_TECH_FILTER: java,spring,hibernate,maven,gradle,mysql,postgresql,docker,kubernetes,aws
      SCRAPER_LOCATION_FILTER: bulgaria,sofia,plovdiv,varna,burgas,remote
      SCRAPER_JOB_TYPE_FILTER: backend,full-stack,java-developer
      # Monitoring & Metrics
      METRICS_ENABLED: "true"
      HEALTH_CHECK_ENABLED: "true"
      # Scraper Limits
      SCRAPER_MAX_VACANCIES: 1
    ports:
      - "3001:3001"
      - "5555:5555"
    volumes:
      - ./apps/api/src:/app/apps/api/src:ro
      - ./packages:/app/packages:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - talent-radar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    working_dir: /app/apps/api
    command: ["npm", "run", "start:dev"]

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: talent-radar-web
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3001
      VITE_APP_NAME: TalentRadar
      VITE_APP_VERSION: 0.1.0
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web/src:/app/src:ro
      - ./apps/web/public:/app/public:ro
      - ./apps/web/index.html:/app/index.html:ro
      - ./apps/web/vite.config.ts:/app/vite.config.ts:ro
      - ./apps/web/tsconfig.json:/app/tsconfig.json:ro
      - ./apps/web/tailwind.config.js:/app/tailwind.config.js:ro
      - ./apps/web/postcss.config.js:/app/postcss.config.js:ro
    depends_on:
      - api
    networks:
      - talent-radar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3



  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: talent-radar-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-dev_redis_password_change_in_production}
      HTTP_USER: admin
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin_change_in_production}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - talent-radar-network
    profiles:
      - tools



networks:
  talent-radar-network:
    name: talent-radar-network
    driver: bridge
